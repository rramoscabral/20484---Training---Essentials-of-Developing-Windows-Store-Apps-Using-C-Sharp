using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ILoveNotes.Data;
using ILoveNotes.DataModel;
using Windows.Foundation;
using Windows.Networking.Connectivity;
using Windows.UI.Notifications;
using Windows.UI.Popups;
using Windows.UI.StartScreen;
using Windows.UI.ViewManagement;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Media.Imaging;

namespace ILoveNotes.Common
{
    public static class Helpers
    {
        /// <summary>
        /// Pick random image from a list of images
        /// </summary>
        /// <param name="images">List of images</param>
        /// <returns>image path</returns>
        public static string GetRandomImage(List<string> images)
        {
            var rnd = new Random();
            var count = images.Count();
            if (count == 0) return null;

            var index = rnd.Next(count);
            return images[index];
        }

        /// <summary>
        /// Property return true if network available
        /// Using NetworkInformation.GetInternetConnectionProfile() will allow to know if there network connection.
        /// </summary>
        public static bool IsNetworkAvailable
        {
            get
            {
                ConnectionProfile InternetConnectionProfile = NetworkInformation.GetInternetConnectionProfile();
                return InternetConnectionProfile != null ? true : false;
            }
        }

        /// <summary>
        /// FindVisualChild allows us to retrieve a UI element generated by DataTemplate 
        /// This method will search for specific element type under specific UI element.
        /// </summary>
        /// <typeparam name="childItem">Element Type</typeparam>
        /// <param name="obj">Element Container</param>
        /// <returns>UI Element</returns>
        public static childItem FindVisualChild<childItem>(DependencyObject obj) where childItem : DependencyObject
        {
            for (int i = 0; i < VisualTreeHelper.GetChildrenCount(obj); i++)
            {
                DependencyObject child = VisualTreeHelper.GetChild(obj, i);
                if (child != null && child is childItem)
                    return (childItem)child;
                else
                {
                    childItem childOfChild = FindVisualChild<childItem>(child);
                    if (childOfChild != null)
                        return childOfChild;
                }
            }
            return null;
        }

        /// <summary>
        /// FindVisualChild allows us to retrieve a UI element generated by DataTemplate 
        /// This method will search for specific element by name under specific UI element.
        /// </summary>
        /// <typeparam name="childItem">Element Name</typeparam>
        /// <param name="obj">Element Container</param>
        /// <returns>UI Element</returns>
        public static FrameworkElement FindVisualChild(DependencyObject obj, string name)
        {
            for (int i = 0; i < VisualTreeHelper.GetChildrenCount(obj); i++)
            {
                DependencyObject child = VisualTreeHelper.GetChild(obj, i);
                if (child != null && child is FrameworkElement && ((FrameworkElement)child).Name.Equals(name))
                    return child as FrameworkElement;
                else
                {
                    var childOfChild = FindVisualChild(child, name);
                    if (childOfChild != null)
                        return childOfChild;
                }
            }
            return null;
        }

        /// <summary>
        /// Return the preview image for note based on note type.
        /// </summary>
        /// <param name="type">Note Type</param>
        /// <param name="wide">Regular or Wide image</param>
        /// <returns>image path</returns>
        public static string GetPreviewImageForNote(NoteTypes type, bool wide = false)
        {
            switch (type)
            {
                case DataModel.NoteTypes.Food:
                    return wide == false ? "Assets/Tiles/food-small.png".ToBaseUrl() : "Assets/Tiles/food-wide.png".ToBaseUrl();
                case DataModel.NoteTypes.ToDo:
                    return wide == false ? "Assets/Tiles/todo-small.png".ToBaseUrl() : "Assets/Tiles/todo-wide.png".ToBaseUrl();
                case DataModel.NoteTypes.Notebook:
                    return wide == false ? "Assets/Tiles/notebook-small.png".ToBaseUrl() : "Assets/Tiles/notebook-wide.png".ToBaseUrl();
                default:
                    return wide == false ? "Assets/Tiles/note-small.png".ToBaseUrl() : "Assets/Tiles/note-wide.png".ToBaseUrl();
            }
        }

        public static Rect GetElementRect(FrameworkElement element)
        {
            GeneralTransform buttonTransform = element.TransformToVisual(null);
            Point point = buttonTransform.TransformPoint(new Point());
            return new Rect(point, new Size(element.ActualWidth, element.ActualHeight));
        }

        /// <summary>
        /// Display MessageDialog with Yes and Cancel buttons
        /// </summary>
        /// <param name="content">Message Content</param>
        /// <param name="title">Message Title</param>
        /// <returns>Yes = True, Cancel = False</returns>
        public async static Task<bool> ShowDialog(string content, string title)
        {
            var msg = new Windows.UI.Popups.MessageDialog(content, title);
            msg.Commands.Add(new UICommand("Yes"));
            msg.Commands.Add(new UICommand("Cancel"));

            var result = await msg.ShowAsync();
            return result.Label == "Yes" ? true : false;
        }

        public static bool EnsureUnsnapped()
        {
            return true;
        }

        public async static void ShowMessageAsync(string content, string title)
        {
            var msg = new Windows.UI.Popups.MessageDialog(content, title);
            await msg.ShowAsync();
        }

        public async static void ShowErrorMessageAsync(string title, Exception ex)
        {
            var msg = new Windows.UI.Popups.MessageDialog(string.Format("Error Message:{0}", ex.Message), title);
            await msg.ShowAsync();
        }

        public async static void ShowErrorMessageAsync(string title, string content)
        {
            var msg = new Windows.UI.Popups.MessageDialog(content, title);
            await msg.ShowAsync();
        }

        /// <summary>
        /// Generate Unique Id for Note Item
        /// </summary>
        /// <returns></returns>
        public static string GetUniqueId()
        {
            byte[] buffer = Guid.NewGuid().ToByteArray();
            return BitConverter.ToInt64(buffer, 0).ToString();
        }

        /// <summary>
        /// Generate Short Unique Id for ToDo Item
        /// </summary>
        /// <returns></returns>
        public static string GetShortUniqueId()
        {
            byte[] buffer = Guid.NewGuid().ToByteArray();
            return Math.Abs(BitConverter.ToInt32(buffer, 0)).ToString();
        }
    }
}
